{"ast":null,"code":"var _jsxFileName = \"/Users/ibrahimfarajzade/Downloads/GOSH-FHIRworks2020-React-Dashboard-master/src/routes/patients.js\";\nimport React from \"react\";\nimport PatientsListDisplay from \"../components/PatientsListDisplay\";\nimport { getPatientList } from \"../javascript/api\";\nimport Header from \"../components/Header\";\nimport Overlay from \"../components/Overlay\";\nimport { message } from \"antd\";\n\nconst moment = require(\"moment\");\n\nclass PatientsPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      awaitingData: true,\n      patients: null,\n      page: 0\n    };\n  }\n\n  async componentDidMount() {\n    let json = await getPatientList(message);\n    this.setState({\n      awaitingData: false,\n      patients: json\n    });\n  }\n\n  render() {\n    let patientData = this.state.patients;\n\n    if (this.props.filter && this.state.patients) {\n      patientData = doFilter(this.state.patients, this.props.filter);\n\n      if (patientData.length > 0) {\n        message.success({\n          content: `Found ${patientData.length} matching records`,\n          duration: 3\n        });\n      } else {\n        message.warn({\n          content: `No records found`,\n          duration: 3\n        });\n      }\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(Overlay, {\n      show: this.state.awaitingData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }), !this.props.filter && React.createElement(Header, {\n      title: \"Users List\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }), React.createElement(PatientsListDisplay, {\n      patients: patientData,\n      loading: this.state.awaitingData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }));\n  }\n\n}\n\nfunction recursiveFind(obj, value, exact) {\n  let json = JSON.stringify(obj);\n  const regex = exact ? new RegExp('\"' + value.toLowerCase() + '\"', \"g\") : new RegExp(\".*\" + value.toLowerCase() + \".*\", \"g\");\n  return json.toLowerCase().search(regex) !== -1;\n}\n\nfunction doFilter(patients, filter) {\n  let result = [];\n\n  for (let patient of patients) {\n    let data = patient.resource;\n    let match = [];\n\n    if (filter.name) {\n      match.push(recursiveFind(data.name, filter.name, filter.exactMatch));\n    }\n\n    if (filter.birthdate) {\n      let isWithIn = filter.birthdate[0] <= moment(data.birthDate) && moment(data.birthDate) <= filter.birthdate[1];\n      match.push(isWithIn);\n    }\n\n    if (filter.gender) {\n      match.push(data.gender === filter.gender);\n    }\n\n    if (filter.phone) {\n      match.push(recursiveFind(data.telecom, filter.phone, filter.exactMatch));\n    }\n\n    if (filter.address) {\n      match.push(recursiveFind(data.address, filter.address, filter.exactMatch));\n    }\n\n    if (filter.maritalStatus) {\n      match.push(recursiveFind(data.maritalStatus, filter.maritalStatus, filter.exactMatch));\n    }\n\n    if (filter.id) {\n      match.push(recursiveFind(data.id, filter.id, filter.exactMatch));\n    }\n\n    if (filter.anythingElse) {\n      match.push(recursiveFind(data, filter.anythingElse, filter.exactMatch));\n    } // result\n\n\n    if (match.every(x => x === true)) {\n      result.push(patient);\n    }\n  }\n\n  console.log(result);\n  return result;\n}\n\nexport default PatientsPage;","map":{"version":3,"sources":["/Users/ibrahimfarajzade/Downloads/GOSH-FHIRworks2020-React-Dashboard-master/src/routes/patients.js"],"names":["React","PatientsListDisplay","getPatientList","Header","Overlay","message","moment","require","PatientsPage","Component","constructor","props","state","awaitingData","patients","page","componentDidMount","json","setState","render","patientData","filter","doFilter","length","success","content","duration","warn","recursiveFind","obj","value","exact","JSON","stringify","regex","RegExp","toLowerCase","search","result","patient","data","resource","match","name","push","exactMatch","birthdate","isWithIn","birthDate","gender","phone","telecom","address","maritalStatus","id","anythingElse","every","x","console","log"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PatientsListDisplay from \"../components/PatientsListDisplay\";\nimport { getPatientList } from \"../javascript/api\";\nimport Header from \"../components/Header\";\nimport Overlay from \"../components/Overlay\";\nimport { message } from \"antd\";\n\nconst moment = require(\"moment\");\n\nclass PatientsPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      awaitingData: true,\n      patients: null,\n      page: 0\n    };\n  }\n\n  async componentDidMount() {\n    let json = await getPatientList(message);\n\n    this.setState({\n      awaitingData: false,\n      patients: json\n    });\n  }\n\n  render() {\n    let patientData = this.state.patients;\n    if (this.props.filter && this.state.patients) {\n      patientData = doFilter(this.state.patients, this.props.filter);\n      if (patientData.length > 0) {\n        message.success({ content: `Found ${patientData.length} matching records`, duration: 3 });\n      } else {\n        message.warn({ content: `No records found`, duration: 3 });\n      }\n    }\n    return (\n      <div>\n        <Overlay show={this.state.awaitingData}></Overlay>\n        {!this.props.filter && <Header title=\"Users List\"></Header>}\n        <PatientsListDisplay patients={patientData} loading={this.state.awaitingData} />\n      </div>\n    );\n  }\n}\n\nfunction recursiveFind(obj, value, exact) {\n  let json = JSON.stringify(obj);\n  const regex = exact\n    ? new RegExp('\"' + value.toLowerCase() + '\"', \"g\")\n    : new RegExp(\".*\" + value.toLowerCase() + \".*\", \"g\");\n  return json.toLowerCase().search(regex) !== -1;\n}\n\nfunction doFilter(patients, filter) {\n  let result = [];\n  for (let patient of patients) {\n    let data = patient.resource;\n    let match = [];\n    if (filter.name) {\n      match.push(recursiveFind(data.name, filter.name, filter.exactMatch));\n    }\n    if (filter.birthdate) {\n      let isWithIn =\n        filter.birthdate[0] <= moment(data.birthDate) &&\n        moment(data.birthDate) <= filter.birthdate[1];\n      match.push(isWithIn);\n    }\n    if (filter.gender) {\n      match.push(data.gender === filter.gender);\n    }\n    if (filter.phone) {\n      match.push(recursiveFind(data.telecom, filter.phone, filter.exactMatch));\n    }\n    if (filter.address) {\n      match.push(recursiveFind(data.address, filter.address, filter.exactMatch));\n    }\n    if (filter.maritalStatus) {\n      match.push(recursiveFind(data.maritalStatus, filter.maritalStatus, filter.exactMatch));\n    }\n    if (filter.id) {\n      match.push(recursiveFind(data.id, filter.id, filter.exactMatch));\n    }\n    if (filter.anythingElse) {\n      match.push(recursiveFind(data, filter.anythingElse, filter.exactMatch));\n    }\n\n    // result\n    if (match.every(x => x === true)) {\n      result.push(patient);\n    }\n  }\n  console.log(result);\n  return result;\n}\n\nexport default PatientsPage;\n"]},"metadata":{},"sourceType":"module"}