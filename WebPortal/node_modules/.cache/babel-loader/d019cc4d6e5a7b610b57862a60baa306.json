{"ast":null,"code":"let patientListDemo = require(\"./patientDemoData.json\");\n\nlet observationDemo = require(\"./observationDemoData.json\");\n\nconst SERVER_URL = \"https://henryz.cc:5001/api/\";\n\nconst moment = require(\"moment\");\n\nconst getPatientDemo = () => {\n  return combinePatientsBundle(patientListDemo);\n};\n\nconst getObservationDemo = () => {\n  return combinePatientsBundle(observationDemo);\n};\n\nfunction combinePatientsBundle(json) {\n  let result = [];\n\n  for (let bundle of json) {\n    result = result.concat(bundle.entry);\n  }\n\n  console.log(result);\n  return result;\n}\n\nfunction requestObservation(id) {\n  return new Promise((resolve, reject) => {\n    fetch(SERVER_URL + \"Observation/\" + id).then(async res => {\n      let json = await res.json();\n      console.log(json);\n      json = combinePatientsBundle(json);\n      resolve(json);\n    }).catch(e => {\n      reject(e);\n      console.log(e);\n    });\n  });\n}\n\nfunction requestPatientList() {\n  return new Promise((resolve, reject) => {\n    let localCache = localStorage.getItem(\"patients\");\n\n    if (localCache) {\n      setTimeout(() => {\n        resolve(JSON.parse(localCache));\n      }, 1000);\n    } else {\n      fetch(SERVER_URL + \"Patient/\").then(async res => {\n        let json = await res.json();\n        console.log(json);\n        json = combinePatientsBundle(json);\n        localStorage.setItem(\"patients\", JSON.stringify(json));\n        resolve(json);\n      }).catch(e => {\n        reject(e);\n        console.log(e);\n      });\n    }\n  });\n}\n\nfunction getPatientList(message) {\n  return new Promise(async resolve => {\n    let json = null;\n\n    if (window.$globalPatients) {\n      json = window.$globalPatients;\n    } else {\n      // start load api, show loading\n      const hideLoading = message.loading(\"Please wait, fetching patient data...\", 0);\n\n      try {\n        json = await requestPatientList();\n        message.success({\n          content: \"Patient data loaded!\",\n          duration: 2\n        });\n      } catch (e) {\n        json = getPatientDemo();\n        message.warn({\n          content: \"Network Error, the server might be down. Local demo data is loaded.\",\n          duration: 5\n        });\n      }\n\n      window.$globalPatients = json;\n      hideLoading();\n    }\n\n    resolve(json);\n  });\n}\n\nfunction parseAllPatientData(patients) {\n  const tableData = [];\n  patients.forEach(elementRaw => {\n    var _element$name, _element$name$, _element$name2, _element$name2$, _element$name2$$given, _element$telecom, _element$telecom$, _element$communicatio, _element$communicatio2, _element$communicatio3, _element$maritalStatu, _element$address, _element$address$, _element$address2, _element$address2$, _element$address3, _element$address3$, _element$address4, _element$address4$;\n\n    if (!elementRaw) {\n      return null;\n    }\n\n    let element = elementRaw.resource;\n    let patient = new Object();\n    patient.name = ((_element$name = element.name) === null || _element$name === void 0 ? void 0 : (_element$name$ = _element$name[0]) === null || _element$name$ === void 0 ? void 0 : _element$name$.family) + \" \" + ((_element$name2 = element.name) === null || _element$name2 === void 0 ? void 0 : (_element$name2$ = _element$name2[0]) === null || _element$name2$ === void 0 ? void 0 : (_element$name2$$given = _element$name2$.given) === null || _element$name2$$given === void 0 ? void 0 : _element$name2$$given[0]);\n    patient.id = element.id;\n    patient.phone = (_element$telecom = element.telecom) === null || _element$telecom === void 0 ? void 0 : (_element$telecom$ = _element$telecom[0]) === null || _element$telecom$ === void 0 ? void 0 : _element$telecom$.value;\n    patient.language = (_element$communicatio = element.communication) === null || _element$communicatio === void 0 ? void 0 : (_element$communicatio2 = _element$communicatio[0]) === null || _element$communicatio2 === void 0 ? void 0 : (_element$communicatio3 = _element$communicatio2.language) === null || _element$communicatio3 === void 0 ? void 0 : _element$communicatio3.text;\n    patient.maritalStatus = (_element$maritalStatu = element.maritalStatus) === null || _element$maritalStatu === void 0 ? void 0 : _element$maritalStatu.text;\n    patient.address = (_element$address = element.address) === null || _element$address === void 0 ? void 0 : (_element$address$ = _element$address[0]) === null || _element$address$ === void 0 ? void 0 : _element$address$.line[0];\n    patient.city = (_element$address2 = element.address) === null || _element$address2 === void 0 ? void 0 : (_element$address2$ = _element$address2[0]) === null || _element$address2$ === void 0 ? void 0 : _element$address2$.city;\n    patient.state = (_element$address3 = element.address) === null || _element$address3 === void 0 ? void 0 : (_element$address3$ = _element$address3[0]) === null || _element$address3$ === void 0 ? void 0 : _element$address3$.state;\n    patient.country = (_element$address4 = element.address) === null || _element$address4 === void 0 ? void 0 : (_element$address4$ = _element$address4[0]) === null || _element$address4$ === void 0 ? void 0 : _element$address4$.country;\n    patient.gender = element.gender;\n    patient.birthDate = element.birthDate;\n    patient.birthMonth = moment(element.birthDate).format(\"MMMM\");\n    patient.age = moment().diff(element.birthDate, \"years\");\n    patient.raw = elementRaw;\n    tableData.push(patient);\n  });\n  return tableData;\n}\n\nexport { requestPatientList, requestObservation, getPatientDemo, getObservationDemo, parseAllPatientData, getPatientList };","map":{"version":3,"sources":["/Users/ibrahimfarajzade/Downloads/GOSH-FHIRworks2020-React-Dashboard-master/src/javascript/api.js"],"names":["patientListDemo","require","observationDemo","SERVER_URL","moment","getPatientDemo","combinePatientsBundle","getObservationDemo","json","result","bundle","concat","entry","console","log","requestObservation","id","Promise","resolve","reject","fetch","then","res","catch","e","requestPatientList","localCache","localStorage","getItem","setTimeout","JSON","parse","setItem","stringify","getPatientList","message","window","$globalPatients","hideLoading","loading","success","content","duration","warn","parseAllPatientData","patients","tableData","forEach","elementRaw","element","resource","patient","Object","name","family","given","phone","telecom","value","language","communication","text","maritalStatus","address","line","city","state","country","gender","birthDate","birthMonth","format","age","diff","raw","push"],"mappings":"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","sourcesContent":["let patientListDemo = require(\"./patientDemoData.json\");\nlet observationDemo = require(\"./observationDemoData.json\");\n\nconst SERVER_URL = \"https://henryz.cc:5001/api/\";\n\nconst moment = require(\"moment\");\n\nconst getPatientDemo = () => {\n  return combinePatientsBundle(patientListDemo);\n};\n\nconst getObservationDemo = () => {\n  return combinePatientsBundle(observationDemo);\n};\n\nfunction combinePatientsBundle(json) {\n  let result = [];\n  for (let bundle of json) {\n    result = result.concat(bundle.entry);\n  }\n  console.log(result);\n  return result;\n}\n\nfunction requestObservation(id) {\n  return new Promise((resolve, reject) => {\n    fetch(SERVER_URL + \"Observation/\" + id)\n      .then(async res => {\n        let json = await res.json();\n        console.log(json);\n        json = combinePatientsBundle(json);\n        resolve(json);\n      })\n      .catch(e => {\n        reject(e);\n        console.log(e);\n      });\n  });\n}\n\nfunction requestPatientList() {\n  return new Promise((resolve, reject) => {\n    let localCache = localStorage.getItem(\"patients\");\n    if (localCache) {\n      setTimeout(() => {\n        resolve(JSON.parse(localCache));\n      }, 1000);\n    } else {\n      fetch(SERVER_URL + \"Patient/\")\n        .then(async res => {\n          let json = await res.json();\n          console.log(json);\n          json = combinePatientsBundle(json);\n          localStorage.setItem(\"patients\", JSON.stringify(json));\n          resolve(json);\n        })\n        .catch(e => {\n          reject(e);\n          console.log(e);\n        });\n    }\n  });\n}\n\nfunction getPatientList(message) {\n  return new Promise(async resolve => {\n    let json = null;\n    if (window.$globalPatients) {\n      json = window.$globalPatients;\n    } else {\n      // start load api, show loading\n      const hideLoading = message.loading(\"Please wait, fetching patient data...\", 0);\n      try {\n        json = await requestPatientList();\n        message.success({ content: \"Patient data loaded!\", duration: 2 });\n      } catch (e) {\n        json = getPatientDemo();\n        message.warn({\n          content: \"Network Error, the server might be down. Local demo data is loaded.\",\n          duration: 5\n        });\n      }\n      window.$globalPatients = json;\n      hideLoading();\n    }\n    resolve(json);\n  });\n}\n\nfunction parseAllPatientData(patients) {\n  const tableData = [];\n  patients.forEach(elementRaw => {\n    if (!elementRaw) {\n      return null;\n    }\n    let element = elementRaw.resource;\n    let patient = new Object();\n    patient.name = element.name?.[0]?.family + \" \" + element.name?.[0]?.given?.[0];\n    patient.id = element.id;\n    patient.phone = element.telecom?.[0]?.value;\n    patient.language = element.communication?.[0]?.language?.text;\n    patient.maritalStatus = element.maritalStatus?.text;\n    patient.address = element.address?.[0]?.line[0];\n    patient.city = element.address?.[0]?.city;\n    patient.state = element.address?.[0]?.state;\n    patient.country = element.address?.[0]?.country;\n    patient.gender = element.gender;\n    patient.birthDate = element.birthDate;\n    patient.birthMonth = moment(element.birthDate).format(\"MMMM\");\n    patient.age = moment().diff(element.birthDate, \"years\");\n    patient.raw = elementRaw;\n    tableData.push(patient);\n  });\n\n  return tableData;\n}\n\nexport {\n  requestPatientList,\n  requestObservation,\n  getPatientDemo,\n  getObservationDemo,\n  parseAllPatientData,\n  getPatientList\n};\n"]},"metadata":{},"sourceType":"module"}